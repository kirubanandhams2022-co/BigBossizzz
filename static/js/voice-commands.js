/**
 * BigBossizzz Voice Commands
 * Accessibility-focused voice control system for quiz navigation and interaction
 */

class VoiceCommandsManager {
    constructor() {
        this.recognition = null;
        this.isListening = false;
        this.isSupported = false;
        this.commands = new Map();
        this.currentContext = 'general';
        this.confidenceThreshold = 0.7;
        this.voiceIndicator = null;
        this.lastCommand = null;
        this.commandHistory = [];
        
        this.init();
    }
    
    init() {
        console.log('? Initializing Voice Commands Manager...');
        
        // Check browser support
        this.checkSupport();
        
        if (!this.isSupported) {
            console.log('? Voice commands not supported in this browser');
            return;
        }
        
        // Setup speech recognition
        this.setupSpeechRecognition();
        
        // Define voice commands
        this.defineCommands();
        
        // Setup voice indicator UI
        this.setupVoiceIndicator();
        
        // Setup keyboard shortcuts for voice control
        this.setupKeyboardShortcuts();
        
        // Setup context detection
        this.setupContextDetection();
        
        console.log('? Voice Commands Manager initialized successfully');
    }
    
    checkSupport() {
        this.isSupported = 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window;
        
        if (this.isSupported) {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            this.recognition = new SpeechRecognition();
        }
    }
    
    setupSpeechRecognition() {
        if (!this.recognition) return;
        
        // Configure speech recognition
        this.recognition.continuous = false;\n        this.recognition.interimResults = false;\n        this.recognition.lang = 'en-US';\n        this.recognition.maxAlternatives = 3;\n        \n        // Event listeners\n        this.recognition.onstart = this.handleRecognitionStart.bind(this);\n        this.recognition.onresult = this.handleRecognitionResult.bind(this);\n        this.recognition.onerror = this.handleRecognitionError.bind(this);\n        this.recognition.onend = this.handleRecognitionEnd.bind(this);\n    }\n    \n    defineCommands() {\n        // General navigation commands\n        this.addCommand('general', [\n            'go home', 'home', 'homepage'\n        ], () => {\n            window.location.href = '/';\n            this.announce('Going to homepage');\n        });\n        \n        this.addCommand('general', [\n            'go to dashboard', 'dashboard', 'my dashboard'\n        ], () => {\n            const dashboardLink = document.querySelector('a[href*=\"dashboard\"]');\n            if (dashboardLink) {\n                dashboardLink.click();\n                this.announce('Opening dashboard');\n            } else {\n                this.announce('Dashboard not found');\n            }\n        });\n        \n        this.addCommand('general', [\n            'help', 'show help', 'voice help', 'commands'\n        ], () => {\n            this.showVoiceHelp();\n        });\n        \n        this.addCommand('general', [\n            'stop listening', 'stop voice', 'turn off voice'\n        ], () => {\n            this.stopListening();\n            this.announce('Voice commands disabled');\n        });\n        \n        this.addCommand('general', [\n            'read page', 'read content', 'speak page'\n        ], () => {\n            this.readPageContent();\n        });\n        \n        // Quiz-specific commands\n        this.addCommand('quiz', [\n            'submit answer', 'submit', 'next question', 'continue'\n        ], () => {\n            this.submitCurrentAnswer();\n        });\n        \n        this.addCommand('quiz', [\n            'previous question', 'go back', 'back'\n        ], () => {\n            this.goToPreviousQuestion();\n        });\n        \n        this.addCommand('quiz', [\n            'select option one', 'choose one', 'option a', 'first option'\n        ], () => {\n            this.selectQuizOption(0);\n        });\n        \n        this.addCommand('quiz', [\n            'select option two', 'choose two', 'option b', 'second option'\n        ], () => {\n            this.selectQuizOption(1);\n        });\n        \n        this.addCommand('quiz', [\n            'select option three', 'choose three', 'option c', 'third option'\n        ], () => {\n            this.selectQuizOption(2);\n        });\n        \n        this.addCommand('quiz', [\n            'select option four', 'choose four', 'option d', 'fourth option'\n        ], () => {\n            this.selectQuizOption(3);\n        });\n        \n        this.addCommand('quiz', [\n            'read question', 'repeat question', 'what is the question'\n        ], () => {\n            this.readCurrentQuestion();\n        });\n        \n        this.addCommand('quiz', [\n            'read options', 'list options', 'what are the options'\n        ], () => {\n            this.readQuizOptions();\n        });\n        \n        this.addCommand('quiz', [\n            'finish quiz', 'submit quiz', 'end quiz'\n        ], () => {\n            this.finishQuiz();\n        });\n        \n        this.addCommand('quiz', [\n            'time left', 'how much time', 'check timer'\n        ], () => {\n            this.announceTimeLeft();\n        });\n        \n        // Form commands\n        this.addCommand('form', [\n            'submit form', 'send form', 'save form'\n        ], () => {\n            this.submitCurrentForm();\n        });\n        \n        this.addCommand('form', [\n            'clear form', 'reset form', 'clear all'\n        ], () => {\n            this.clearCurrentForm();\n        });\n        \n        // Accessibility commands\n        this.addCommand('general', [\n            'increase text size', 'bigger text', 'zoom in'\n        ], () => {\n            this.adjustTextSize(1.1);\n        });\n        \n        this.addCommand('general', [\n            'decrease text size', 'smaller text', 'zoom out'\n        ], () => {\n            this.adjustTextSize(0.9);\n        });\n        \n        this.addCommand('general', [\n            'toggle theme', 'switch theme', 'dark mode', 'light mode'\n        ], () => {\n            if (window.themeManager) {\n                const currentTheme = window.themeManager.getCurrentTheme();\n                const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n                window.themeManager.setTheme(newTheme);\n                this.announce(`Switched to ${newTheme} theme`);\n            }\n        });\n        \n        // Navigation commands\n        this.addCommand('general', [\n            'scroll up', 'scroll to top'\n        ], () => {\n            window.scrollTo({ top: 0, behavior: 'smooth' });\n            this.announce('Scrolled to top');\n        });\n        \n        this.addCommand('general', [\n            'scroll down', 'scroll to bottom'\n        ], () => {\n            window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });\n            this.announce('Scrolled to bottom');\n        });\n    }\n    \n    addCommand(context, phrases, action) {\n        if (!this.commands.has(context)) {\n            this.commands.set(context, new Map());\n        }\n        \n        const contextCommands = this.commands.get(context);\n        phrases.forEach(phrase => {\n            contextCommands.set(phrase.toLowerCase(), action);\n        });\n    }\n    \n    setupVoiceIndicator() {\n        // Create voice activation button\n        const voiceButton = document.createElement('button');\n        voiceButton.id = 'voice-activation-btn';\n        voiceButton.className = 'voice-activation-btn';\n        voiceButton.setAttribute('aria-label', 'Activate voice commands');\n        voiceButton.innerHTML = `\n            <i class=\"fas fa-microphone\" id=\"voice-icon\"></i>\n            <span class=\"voice-status\" id=\"voice-status\">Click to activate</span>\n        `;\n        \n        // Add styles\n        const styles = document.createElement('style');\n        styles.textContent = `\n            .voice-activation-btn {\n                position: fixed;\n                bottom: 20px;\n                right: 20px;\n                background: var(--btn-primary-bg);\n                color: white;\n                border: none;\n                border-radius: 50px;\n                padding: 12px 20px;\n                cursor: pointer;\n                box-shadow: 0 4px 12px var(--shadow-color);\n                z-index: 1055;\n                transition: all 0.3s ease;\n                font-size: 0.9rem;\n                display: flex;\n                align-items: center;\n                gap: 8px;\n                min-width: 120px;\n            }\n            \n            .voice-activation-btn:hover {\n                transform: translateY(-2px);\n                box-shadow: 0 6px 16px var(--shadow-hover);\n            }\n            \n            .voice-activation-btn.listening {\n                background: var(--btn-danger-bg);\n                animation: pulse-listening 1.5s infinite;\n            }\n            \n            .voice-activation-btn.processing {\n                background: var(--btn-warning-bg);\n            }\n            \n            .voice-activation-btn:disabled {\n                background: var(--btn-secondary-bg);\n                cursor: not-allowed;\n                opacity: 0.6;\n            }\n            \n            @keyframes pulse-listening {\n                0% { transform: scale(1); }\n                50% { transform: scale(1.05); }\n                100% { transform: scale(1); }\n            }\n            \n            .voice-status {\n                font-size: 0.8rem;\n                white-space: nowrap;\n            }\n            \n            @media (max-width: 768px) {\n                .voice-activation-btn {\n                    bottom: 80px;\n                    right: 10px;\n                    padding: 10px 16px;\n                    min-width: 100px;\n                }\n                \n                .voice-status {\n                    display: none;\n                }\n            }\n        `;\n        \n        document.head.appendChild(styles);\n        document.body.appendChild(voiceButton);\n        \n        // Add click handler\n        voiceButton.addEventListener('click', () => {\n            if (this.isListening) {\n                this.stopListening();\n            } else {\n                this.startListening();\n            }\n        });\n        \n        this.voiceIndicator = voiceButton;\n    }\n    \n    setupKeyboardShortcuts() {\n        document.addEventListener('keydown', (e) => {\n            // Ctrl + Shift + V: Toggle voice commands\n            if (e.ctrlKey && e.shiftKey && e.key === 'V') {\n                e.preventDefault();\n                if (this.isListening) {\n                    this.stopListening();\n                } else {\n                    this.startListening();\n                }\n            }\n            \n            // Escape: Stop listening\n            if (e.key === 'Escape' && this.isListening) {\n                this.stopListening();\n            }\n        });\n    }\n    \n    setupContextDetection() {\n        // Detect page context changes\n        const observer = new MutationObserver(() => {\n            this.updateContext();\n        });\n        \n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n        \n        // Initial context detection\n        this.updateContext();\n    }\n    \n    updateContext() {\n        if (document.querySelector('.quiz-container, .quiz-form')) {\n            this.currentContext = 'quiz';\n        } else if (document.querySelector('form')) {\n            this.currentContext = 'form';\n        } else {\n            this.currentContext = 'general';\n        }\n        \n        console.log('? Voice context updated:', this.currentContext);\n    }\n    \n    startListening() {\n        if (!this.isSupported || this.isListening) return;\n        \n        try {\n            this.recognition.start();\n            console.log('? Voice recognition started');\n        } catch (error) {\n            console.error('? Failed to start voice recognition:', error);\n            this.announce('Failed to start voice recognition');\n        }\n    }\n    \n    stopListening() {\n        if (!this.isSupported || !this.isListening) return;\n        \n        try {\n            this.recognition.stop();\n            console.log('? Voice recognition stopped');\n        } catch (error) {\n            console.error('? Failed to stop voice recognition:', error);\n        }\n    }\n    \n    handleRecognitionStart() {\n        this.isListening = true;\n        this.updateVoiceIndicator('listening');\n        this.announce('Listening for voice command');\n    }\n    \n    handleRecognitionResult(event) {\n        const results = Array.from(event.results[0]);\n        const bestResult = results.reduce((best, current) => \n            current.confidence > best.confidence ? current : best\n        );\n        \n        if (bestResult.confidence >= this.confidenceThreshold) {\n            const command = bestResult.transcript.toLowerCase().trim();\n            console.log('? Voice command recognized:', command, `(${Math.round(bestResult.confidence * 100)}%)`);\n            \n            this.executeCommand(command);\n        } else {\n            console.log('? Voice command unclear:', bestResult.transcript, `(${Math.round(bestResult.confidence * 100)}%)`);\n            this.announce('Command not recognized. Please try again.');\n        }\n    }\n    \n    handleRecognitionError(event) {\n        console.error('? Voice recognition error:', event.error);\n        \n        let errorMessage = 'Voice recognition error';\n        switch (event.error) {\n            case 'no-speech':\n                errorMessage = 'No speech detected';\n                break;\n            case 'audio-capture':\n                errorMessage = 'Microphone not available';\n                break;\n            case 'not-allowed':\n                errorMessage = 'Microphone permission denied';\n                break;\n            case 'network':\n                errorMessage = 'Network error';\n                break;\n        }\n        \n        this.announce(errorMessage);\n        this.updateVoiceIndicator('error');\n    }\n    \n    handleRecognitionEnd() {\n        this.isListening = false;\n        this.updateVoiceIndicator('idle');\n    }\n    \n    executeCommand(command) {\n        this.updateVoiceIndicator('processing');\n        \n        // Store command in history\n        this.commandHistory.push({\n            command,\n            context: this.currentContext,\n            timestamp: new Date()\n        });\n        \n        // Keep only last 20 commands\n        if (this.commandHistory.length > 20) {\n            this.commandHistory.shift();\n        }\n        \n        // Try to find and execute command\n        let executed = false;\n        \n        // Check context-specific commands first\n        if (this.commands.has(this.currentContext)) {\n            const contextCommands = this.commands.get(this.currentContext);\n            for (const [phrase, action] of contextCommands) {\n                if (command.includes(phrase)) {\n                    action();\n                    this.lastCommand = phrase;\n                    executed = true;\n                    break;\n                }\n            }\n        }\n        \n        // Fall back to general commands\n        if (!executed && this.commands.has('general')) {\n            const generalCommands = this.commands.get('general');\n            for (const [phrase, action] of generalCommands) {\n                if (command.includes(phrase)) {\n                    action();\n                    this.lastCommand = phrase;\n                    executed = true;\n                    break;\n                }\n            }\n        }\n        \n        if (!executed) {\n            this.announce(`Command \"${command}\" not recognized. Say \"help\" for available commands.`);\n        }\n        \n        setTimeout(() => {\n            this.updateVoiceIndicator('idle');\n        }, 1000);\n    }\n    \n    updateVoiceIndicator(state) {\n        if (!this.voiceIndicator) return;\n        \n        const icon = this.voiceIndicator.querySelector('#voice-icon');\n        const status = this.voiceIndicator.querySelector('#voice-status');\n        \n        // Remove all state classes\n        this.voiceIndicator.classList.remove('listening', 'processing', 'error');\n        \n        switch (state) {\n            case 'listening':\n                this.voiceIndicator.classList.add('listening');\n                icon.className = 'fas fa-microphone';\n                status.textContent = 'Listening...';\n                this.voiceIndicator.setAttribute('aria-label', 'Voice commands active - listening');\n                break;\n                \n            case 'processing':\n                this.voiceIndicator.classList.add('processing');\n                icon.className = 'fas fa-cog fa-spin';\n                status.textContent = 'Processing...';\n                this.voiceIndicator.setAttribute('aria-label', 'Processing voice command');\n                break;\n                \n            case 'error':\n                this.voiceIndicator.classList.add('error');\n                icon.className = 'fas fa-exclamation-triangle';\n                status.textContent = 'Error';\n                this.voiceIndicator.setAttribute('aria-label', 'Voice command error');\n                break;\n                \n            case 'idle':\n            default:\n                icon.className = 'fas fa-microphone';\n                status.textContent = 'Click to activate';\n                this.voiceIndicator.setAttribute('aria-label', 'Click to activate voice commands');\n                break;\n        }\n    }\n    \n    // Quiz-specific command implementations\n    submitCurrentAnswer() {\n        const submitButton = document.querySelector('.quiz-submit-btn, button[type=\"submit\"], .btn-primary');\n        if (submitButton) {\n            submitButton.click();\n            this.announce('Answer submitted');\n        } else {\n            this.announce('No submit button found');\n        }\n    }\n    \n    goToPreviousQuestion() {\n        const prevButton = document.querySelector('.prev-question, .btn-secondary');\n        if (prevButton) {\n            prevButton.click();\n            this.announce('Going to previous question');\n        } else {\n            this.announce('No previous question available');\n        }\n    }\n    \n    selectQuizOption(index) {\n        const options = document.querySelectorAll('.quiz-option input, input[type=\"radio\"], input[type=\"checkbox\"]');\n        if (options[index]) {\n            options[index].click();\n            const label = options[index].closest('label') || \n                         document.querySelector(`label[for=\"${options[index].id}\"]`);\n            const optionText = label ? label.textContent.trim() : `Option ${index + 1}`;\n            this.announce(`Selected: ${optionText}`);\n        } else {\n            this.announce(`Option ${index + 1} not available`);\n        }\n    }\n    \n    readCurrentQuestion() {\n        const question = document.querySelector('.question-text, .quiz-question h3, .question-content');\n        if (question) {\n            const questionText = question.textContent.trim();\n            this.speak(`Question: ${questionText}`);\n        } else {\n            this.announce('No question found');\n        }\n    }\n    \n    readQuizOptions() {\n        const options = document.querySelectorAll('.quiz-option, .option-text');\n        if (options.length > 0) {\n            let optionsText = 'Available options: ';\n            options.forEach((option, index) => {\n                const text = option.textContent.trim();\n                optionsText += `Option ${index + 1}: ${text}. `;\n            });\n            this.speak(optionsText);\n        } else {\n            this.announce('No options found');\n        }\n    }\n    \n    finishQuiz() {\n        const finishButton = document.querySelector('.finish-quiz, .submit-quiz, button[value=\"finish\"]');\n        if (finishButton) {\n            finishButton.click();\n            this.announce('Quiz finished');\n        } else {\n            this.announce('Cannot finish quiz');\n        }\n    }\n    \n    announceTimeLeft() {\n        const timer = document.querySelector('.quiz-timer, .time-left, #timer');\n        if (timer) {\n            const timeText = timer.textContent.trim();\n            this.announce(`Time remaining: ${timeText}`);\n        } else {\n            this.announce('Timer not found');\n        }\n    }\n    \n    // Form command implementations\n    submitCurrentForm() {\n        const form = document.querySelector('form');\n        if (form) {\n            form.submit();\n            this.announce('Form submitted');\n        } else {\n            this.announce('No form found');\n        }\n    }\n    \n    clearCurrentForm() {\n        const form = document.querySelector('form');\n        if (form) {\n            form.reset();\n            this.announce('Form cleared');\n        } else {\n            this.announce('No form found');\n        }\n    }\n    \n    // Accessibility implementations\n    adjustTextSize(factor) {\n        const currentSize = parseFloat(getComputedStyle(document.documentElement).fontSize);\n        const newSize = currentSize * factor;\n        document.documentElement.style.fontSize = `${newSize}px`;\n        this.announce(`Text size adjusted to ${Math.round(newSize)}px`);\n    }\n    \n    readPageContent() {\n        const mainContent = document.querySelector('main, .main-content, .content, #main-content');\n        if (mainContent) {\n            const text = this.extractReadableText(mainContent);\n            this.speak(text.substring(0, 500) + (text.length > 500 ? '... Content continues' : ''));\n        } else {\n            this.announce('No main content found');\n        }\n    }\n    \n    extractReadableText(element) {\n        // Get text content while excluding non-readable elements\n        const clone = element.cloneNode(true);\n        const excludeSelectors = ['script', 'style', '.sr-only', '.d-none', '[aria-hidden=\"true\"]'];\n        \n        excludeSelectors.forEach(selector => {\n            const elements = clone.querySelectorAll(selector);\n            elements.forEach(el => el.remove());\n        });\n        \n        return clone.textContent.replace(/\\s+/g, ' ').trim();\n    }\n    \n    showVoiceHelp() {\n        const helpCommands = {\n            'General': [\n                'Go home - Navigate to homepage',\n                'Dashboard - Open dashboard',\n                'Help - Show this help',\n                'Stop listening - Disable voice commands',\n                'Read page - Read page content aloud',\n                'Toggle theme - Switch between dark and light theme',\n                'Scroll up/down - Navigate page'\n            ],\n            'Quiz': [\n                'Submit answer - Submit current answer',\n                'Next question - Continue to next question',\n                'Previous question - Go back',\n                'Select option [1-4] - Choose quiz option',\n                'Read question - Read current question aloud',\n                'Read options - List all available options',\n                'Time left - Check remaining time',\n                'Finish quiz - Complete the quiz'\n            ]\n        };\n        \n        let helpText = 'Available voice commands: ';\n        \n        if (this.currentContext === 'quiz' && helpCommands.Quiz) {\n            helpText += 'Quiz commands: ' + helpCommands.Quiz.join('. ') + '. ';\n        }\n        \n        helpText += 'General commands: ' + helpCommands.General.join('. ');\n        \n        this.speak(helpText);\n    }\n    \n    // Text-to-speech helpers\n    speak(text) {\n        if ('speechSynthesis' in window) {\n            speechSynthesis.cancel(); // Stop any ongoing speech\n            \n            const utterance = new SpeechSynthesisUtterance(text);\n            utterance.rate = 0.9;\n            utterance.pitch = 1;\n            utterance.volume = 0.8;\n            \n            speechSynthesis.speak(utterance);\n        } else {\n            this.announce(text);\n        }\n    }\n    \n    announce(message) {\n        console.log('? Voice announcement:', message);\n        \n        if (window.accessibilityManager) {\n            window.accessibilityManager.makeAnnouncement(message, 'assertive');\n        }\n        \n        // Visual feedback\n        this.showTemporaryMessage(message);\n    }\n    \n    showTemporaryMessage(message) {\n        const messageDiv = document.createElement('div');\n        messageDiv.className = 'voice-message';\n        messageDiv.textContent = message;\n        \n        const styles = `\n            position: fixed;\n            bottom: 80px;\n            right: 20px;\n            background: var(--card-bg);\n            color: var(--text-primary);\n            padding: 8px 12px;\n            border-radius: 4px;\n            box-shadow: 0 2px 8px var(--shadow-color);\n            z-index: 1060;\n            font-size: 0.875rem;\n            max-width: 300px;\n            border: 1px solid var(--border-color);\n        `;\n        \n        messageDiv.style.cssText = styles;\n        document.body.appendChild(messageDiv);\n        \n        setTimeout(() => {\n            if (messageDiv.parentNode) {\n                messageDiv.parentNode.removeChild(messageDiv);\n            }\n        }, 3000);\n    }\n    \n    // Public API\n    isVoiceSupported() {\n        return this.isSupported;\n    }\n    \n    getCurrentContext() {\n        return this.currentContext;\n    }\n    \n    getCommandHistory() {\n        return this.commandHistory;\n    }\n    \n    addCustomCommand(context, phrases, action) {\n        this.addCommand(context, phrases, action);\n    }\n    \n    toggleListening() {\n        if (this.isListening) {\n            this.stopListening();\n        } else {\n            this.startListening();\n        }\n    }\n}\n\n// Auto-initialize voice commands manager\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.voiceCommands = new VoiceCommandsManager();\n});\n\n// Export for use in other modules\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = VoiceCommandsManager;\n}